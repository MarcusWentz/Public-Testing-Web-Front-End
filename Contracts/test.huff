// SPDX-License-Identifier: MIT
// Comiled output bytecode with: huffc test.huff -a -b -v
#define function setValue(uint256) nonpayable returns ()
#define function getValue() nonpayable returns (uint256)

// Event
#define event valueUpdated()

// Storage
#define constant VALUE = FREE_STORAGE_POINTER()

// External function macros

// setValue(uint256)
#define macro SET_VALUE() = takes(0) returns(0) {

   // Simple example with no revert or event argument logic.

   //  // Read uint256 from calldata, remember to read from byte 4 to allow for the function selector! 
   //  0x04            // [0x04]
   //  calldataload    // [value]

   //  // Get pointer and store
   //  [VALUE]         // [value_ptr, value]
   //  sstore          // []

   //  __EVENT_HASH(valueUpdated) // [sig]
   //  0x00 0x00                  // [offset,length,sig]
   //  log0                       // []

   // Complicated example with revert logic.

       // Program counter test:
    // https://www.evm.codes/playground
    // Mnemonic opcodes:
    // PUSH1 0x01 // "PUSH1 0x00" does not jump and stops the program counter before going to next opcode JUMPDEST to keep execution paths isolated.
    // PUSH1 0x0b // Program counter value.
    // JUMPI      // Jump to JUMPDEST at program counter value 0x0b if conditional value is not 0x00.
    // PUSH1 0x01 // Path not jumping.
    // PUSH1 0x00 
    // SSTORE     // slot0 = 1.
    // STOP       // Stop program counter before going forward.
    // JUMPDEST   // Program counter
    // PUSH1 0x05 // Path when you jump.
    // PUSH1 0x00 
    // SSTORE     // slot0 = 5

    // // Read uint256 from calldata, remember to read from byte 4 to allow for the function selector! 
    // 0x04            // [0x04]
    // calldataload    // [calldataValue]

    // //Copy value in stack
    // dup1            // [calldataValue,calldataValue]

    // // // // Read uint256 from storage
    // [VALUE]          // [value_ptr,calldataValue,calldataValue]
    // sload            // [value,calldataValue,calldataValue]

    // // Check if the calldata value is the same.
    // eq               // [value==calldataValue,calldataValue] //Logic is correct with test storage.
    // errorSameValue   // [errorSameValueProgramCounterJumpDest,value==calldataValue,calldataValue]
    // jumpi            // [calldataValue]

    // errorSameValue:
    //     0x05
    //     [VALUE]         // [value_ptr,0x05,calldataValue]
    //     sstore          // []
    //     // 0x00 0x00 revert
    //     return
    
    // // // Get pointer and store
    // [VALUE]         // [value_ptr,calldataValue]
    // sstore          // []

    // __EVENT_HASH(valueUpdated) // [sig]
    // 0x00 0x00                  // [memoryOffset,memoryLength,eventSig]
    // log1                       // []  //log0 does not use eventSig. Use log1 to activate the eventSig. log2 to log4 activate more indexed topics. memoryOffset and memoryLength are used for other event arguments. 

    0x04                             // [0x04]
    calldataload                     // [n]

    // check if n % 2 == 0
    0x05                             // [n, n]
    eq                               // [5<eq]

    // [VALUE]         // [value_ptr,0x02]
    // sstore          // []

    // // jump if even
    even                             // [0x11, n % 2 == 0, n]
    jumpi                            // [n]

    // logic for odd case:
    // 2 * (3 * n + 1) / 2 == (6 * n + 2) / 2 == 3 * n + 1
    // note: multiply by 6 and add 2 (instead of x3 and + 1) so we can always div / 2 to skip a jump to save bytecode
    // 0x06                             // [0x06, n]
    // mul                              // [6 * n]
    // 0x02                             // [0x02, 6 * n]
    // add                              // [6 * n + 2]
    0x01            // [0x01]
    [VALUE]         // [value_ptr,0x01]
    sstore          // []
    stop            // Stop the program counter before it continues to even. Do not return anything since we have nothing in memory to avoid revert from stack underflow.

    even:                            // [n]
      0x02                           // [0x02, n]
      [VALUE]         // [value_ptr,0x02]
      sstore          // []

    //   returndatasize  // -> 0        // [0, n / 2]
    //   mstore                         // []
    //   0x20                           // [0x20]
    //   returndatasize  // -> 0        // [0x20, 0]
    //   return

}

// getValue()
#define macro GET_VALUE() = takes(0) returns(0) {
    // Read uint256 from storage
    [VALUE]         // [value_ptr]
    sload           // [value]

    // Store the return value in memory
    0x00            // [0x00, value]
    mstore          // []

    // Return the first 32 bytes of memory containing our uint256
    0x20            // [0x20]
    0x00            // [0x00, 0x20]
    return          // []
}

// Main
#define macro MAIN() = takes(0) returns(0) {
    // Get the function selector
    0x00 calldataload 0xe0 shr

    dup1 __FUNC_SIG(setValue) eq setValue jumpi // Compare function selector to setValue(uint256)
    dup1 __FUNC_SIG(getValue) eq getValue jumpi // Compare the function selector to getValue()

    // dispatch
    setValue:
        SET_VALUE()
    getValue:
        GET_VALUE()

    0x00 0x00 revert
}